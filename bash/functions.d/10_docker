#!/usr/bin/env bash

docker-cleanup () {
	docker rm $(docker ps -aq 2>/dev/null) 2>/dev/null
	docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
	docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}
docker-remove-stopped() {
	local name
	local state
	name=$1
	state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)
	if [[ "$state" == "false" ]]; then
		docker rm "$name"
	fi
}
docker-clean-images () {
	docker images -a --no-trunc | grep none | awk '{print $3}' | xargs -L 1 -r docker rmi
}

docker-clean-containers () {
	docker ps -a --no-trunc| grep 'Exit' | awk '{print $1}' | xargs -L 1 -r docker rm
}

docker-upgrade-machine () {
	release=$(github-latest-relese-url docker/machine Linux-`uname -m`)
	confirm=$(read-yes-no "Install $release?")
	echo
	if [[ "$confirm" == "yes" ]]; then
		sudo  "curl -L $release > /usr/local/bin/docker-machine && chmod +x /usr/local/bin/docker-machine"
	fi
}
docker-upgrade-compose () {
	release=$(github-latest-relese-url docker/compose Linux-`uname -m`)
	confirm=$(read-yes-no "Install $release?")
	echo
	if [[ "$confirm" == "yes" ]]; then
		sudo "curl -L $release > /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose"
	fi
}

docker-list-vhosts () {
  # docker inspect --format '{{ index (index .Config.Env) 1 }}' $(docker ps -q) | grep VIRTUAL_HOST | cut -d\= -f 2
  docker inspect --format '{{range $index, $value := .Config.Env}}{{$value}}{{println}}{{end}}' $(docker ps -q) | grep VIRTUAL_HOST | cut -d\= -f 2 |sed -e 's/^/http:\/\//'
}
docker-stop-all () {
    docker stop $(docker ps -q) 
}
